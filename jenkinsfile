
pipeline {
  agent any
  
  options {
    // Enable timestamps for the console output
    timestamps()
  }
  
  stages {
    stage('Checkout') {
      steps {
        // Checkout the source code from the GitHub repository
        checkout([$class: 'GitSCM',
                  branches: [[name: '*/master']],
                  userRemoteConfigs: [[
                    credentialsId: 'github-credentials',
                    url: 'git@github.com:aqilshaikh/VulnerableApp.git'
                  ]]])
      }
    }
    
    stage('Build and Deploy') {
      steps {
        // Build the Java application using Maven
        sh 'mvn clean install'
        
        // Deploy the Java application to Tomcat
        sh 'cp target/VulnerableApp.war /path/to/tomcat/webapps/'
        
        // Restart Tomcat
        sh 'sudo systemctl restart tomcat'
      }
    }
    
    stage('Security Scans') {
      steps {
        // Run OWASP Dependency-Check in a Docker container
        sh 'docker run --rm -v ${WORKSPACE}:/workspace -w /workspace owasp/dependency-check:6.4.2 --scan /workspace/target --format XML -o /workspace/dependency-check-report.xml'
        
        // Run TruffleHog in a Docker container
        sh 'docker run --rm -v ${WORKSPACE}:/workspace zricethezav/trufflehog --json /workspace > /workspace/trufflehog-report.json'
        
        // Run SpotBugs in a Docker container
        sh 'docker run --rm -v ${WORKSPACE}:/workspace -w /workspace spotbugs/spotbugs:4.5.3 -xml:withMessages -output /workspace/spotbugs-report.xml target/VulnerableApp.war'
        
        // Run Dockle in a Docker container
        sh 'docker run --rm -v ${WORKSPACE}:/workspace goodwithtech/dockle:0.5.0 -f json -o /workspace/dockle-report.json /workspace/target/VulnerableApp.war'
        
        // Run ZAP Proxy in a Docker container
        sh 'docker run --rm -v ${WORKSPACE}:/zap/wrk -t owasp/zap2docker-stable zap-baseline.py -r zap-report.html -t http://localhost:8080/VulnerableApp'
        
        // Run Nmap for port scanning
        sh 'nmap -p 8080 localhost > nmap-report.txt'
      }
      
      post {
        always {
          // Archive the security scan reports
          archiveArtifacts artifacts: 'dependency-check-report.xml, trufflehog-report.json, spotbugs-report.xml, dockle-report.json, zap-report.html, nmap-report.txt', allowEmptyArchive: true
        }
      }
    }
  }
  
  // Define the GitHub credentials for checking out the repository
  environment {
    GITHUB_CREDENTIALS = credentials('github-credentials')
  }
}

        stage('Deploy') {
            steps {
                // Copy the built WAR file to the remote Tomcat server
                sh 'scp target/my-app.war <username>@<windows-machine-ip>:/path/to/tomcat/webapps/'
            }
        }
        stage('Restart Tomcat') {
            steps {
                // Restart the remote Tomcat server
                sh 'ssh <username>@<windows-machine-ip> "net stop Tomcat8 && net start Tomcat8"'
            }
        }


  stage('Deploy') {
            steps {
                // Copy the built WAR file to the remote Tomcat server using the private key for authentication
                sh 'scp -i /path/to/private/key -o StrictHostKeyChecking=no target/my-app.war <username>@<windows-machine-ip>:/path/to/tomcat/webapps/'
            }
        }
